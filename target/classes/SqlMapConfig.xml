<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <!-- 外部文件引入 引用数据源的配置 -->
    <properties resource="db.properties"/>


    <settings>
        <!-- 驼峰映射  数据库的列名能够映射到去除下划线驼峰命名后的字段名 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--开启日志打印-->
<!--        <setting name="logImpl" value="STDOUT_LOGGING"/>-->
        <setting name="logImpl" value="LOG4J"/>

        <!-- 延迟加载总开关 -->
<!--        延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
            特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态 default:false-->
        <setting name="lazyLoadingEnabled" value="true" />

        <!-- 设置按需加载 default:false （在 3.4.1 及之前的版本中默认为 true）-->
<!--        开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 -->
<!--        否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。-->
        <setting name="aggressiveLazyLoading" value="false" />

<!--        lazyLoadTriggerMethods-->
<!--        指定对象的哪些方法触发一次延迟加载。	用逗号分隔的方法列表。-->
<!--        随意指定一个方法 覆盖默认方法测试-->
        <setting name="lazyLoadTriggerMethods" value="getClass"/>
<!--        默认 这四个属性很特殊,都可能会用到所有属性,所以作为默认方法-->
<!--        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>-->

        <!-- 开启⼆级缓存, -->
<!--        <setting name="cacheEnabled" value="false"/>-->

<!--        默认-->
<!--        <setting name="localCacheScope" value="SESSION"/>-->
<!--        <setting name="localCacheScope" value="STATEMENT"/>-->
    </settings>



    <typeAliases>
        <!--  别名,在XXXMapper.xml 文件用到全路径类名的方式,可以更换为类名小写  -->
        <!--  为指定包内的类配置别名      -->
        <package name="xyz.taoqz.domain"/>
<!--        类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写-->
<!--        <typeAlias alias="grade" type="xyz.taoqz.domain.Grade"/>-->
    </typeAliases>

    <!--分页插件-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <property name="dialect" value="mysql" />
            <property name="rowBoundsWithCount" value="true" />
        </plugin>
    </plugins>

    <!-- 配置环境，连接需要的基本参数 -->
    <environments default="mysql_developer">
        <!-- 连接环境信息，取⼀个任意唯⼀的名字 -->
        <environment id="mysql_developer">
            <!-- 使用jdbc管理事务 -->
<!--            JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。-->
<!--            MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，-->
<!--            而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。-->
<!--            如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置-->
            <transactionManager type="JDBC">
<!--                默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，-->
<!--                因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为-->
                <property name="closeConnection" value="false"/>
            </transactionManager>
            <!-- 配置数据源(配置连接) -->
            <!-- mybatis使⽤连接池⽅式来获取连接 -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <!-- 连接环境信息，取⼀个任意唯⼀的名字 -->
        <environment id="oracle_developer">
            <!-- mybatis使⽤jdbc事务管理⽅式 -->
            <transactionManager type="jdbc"/>
            <!-- mybatis使⽤连接池⽅式来获取连接 -->
            <dataSource type="pooled">
                <!-- 配置与数据库交互的4个必要属性 -->
                <property name="driver" value="${oracle.driver}"/>
                <property name="url" value="${oracle.url}"/>
                <property name="username" value="${oracle.username}"/>
                <property name="password" value="${oracle.password}"/>
            </dataSource>
        </environment>
    </environments>


<!--    MyBatis 到哪里去找映射文件-->
    <!-- 配置文件找到对应的mapper -->
    <!-- 可以写多个包   -->
    <mappers>

        <!--        扫描xml方式的文件 -->
        <mapper resource="mapperxml/StudentMapper.xml"/>
        <mapper resource="mapperxml/TeacherMapper.xml"/>
        <mapper resource="mapperxml/SchoolMapper.xml"/>

<!--        用了自动生成的xml,主要用来resultMap-->
        <mapper resource="mapperxml/GradeMapper.xml"/>

        <!-- 使用完全限定资源定位符（URL） -->
<!--        <mapper url="file:///var/mappers/AuthorMapper.xml"/>-->
        <!-- 使用映射器接口实现类的完全限定类名 -->
<!--        <mapper class="org.mybatis.builder.AuthorMapper"/>-->

        <!-- 将包内的映射器接口实现全部注册为映射器 -->
        <!-- 配合接口和注解使用       -->
<!--         <package name="xyz.taoqz.dao"/>-->
    </mappers>


</configuration>
